{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap","webpack:///external {\"commonjs\":\"babylonjs\",\"commonjs2\":\"babylonjs\",\"amd\":\"babylonjs\",\"root\":\"BABYLON\"}","webpack:///./src/CharacterController.ts"],"names":["root","factory","exports","module","require","define","amd","a","i","window","__WEBPACK_EXTERNAL_MODULE__0__","installedModules","__webpack_require__","moduleId","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","avatar","camera","scene","agMap","faceForward","_walkSpeed","_walkFastSpeed","this","_runSpeed","_backSpeed","_backFastSpeed","_jumpSpeed","_leftSpeed","_leftFastSpeed","_rightSpeed","_rightFastSpeed","_turnSpeed","Math","PI","_turnFastSpeed","_gravity","_minSlopeLimit","_maxSlopeLimit","_sl","_sl2","_stepOffset","_vMoveTot","_vMovStartPos","Zero","_walk","_AnimData","_walkBack","_walkBackFast","_idle","_idleJump","_run","_runJump","_fall","_turnLeft","_turnLeftFast","_turnRight","_turnRightFast","_strafeLeft","_strafeLeftFast","_strafeRight","_strafeRightFast","_slideBack","_anims","_walkKey","_walkBackKey","_turnLeftKey","_turnRightKey","_strafeLeftKey","_strafeRightKey","_jumpKey","_elasticCamera","_cameraTarget","_noFirstPerson","_saveMode","_isRHS","_signRHS","_started","_stopAnim","_prevAnim","_avStartPos","_grounded","_freeFallDist","_fallFrameCountMin","_fallFrameCount","_inFreeFall","_wasWalking","_wasRunning","_jumpStartPosY","_jumpTime","_movFallTime","_sign","_isTurning","_noRot","_idleFallTime","_groundFrameCount","_groundFrameMax","_savedCameraCollision","_inFP","_ray","One","_rayDir","_cameraSkin","_skip","_move","_isAG","_hasAnims","_avatar","_setRHS","setFaceForward","_scene","setAnimationGroups","_skeleton","skeleton","checkAnims","_camera","checkCollisions","_act","_Action","_renderer","_moveAVandCamera","_handleKeyUp","e","_onKeyUp","_handleKeyDown","_onKeyDown","setAvatar","setAvatarSkeleton","setSlopeLimit","minSlopeLimit","maxSlopeLimit","setStepOffset","stepOffset","setWalkSpeed","setRunSpeed","setBackSpeed","setBackFastSpeed","setJumpSpeed","setLeftSpeed","setLeftFastSpeed","setRightSpeed","setRightFastSpeed","setTurnSpeed","setTurnFastSpeed","setGravity","anim","_name","_ag","_exist","_checkFastAnims","setAnimationRanges","arMap","arData","_loop","_setAnim","rangeName","rate","loop","_rate","speedRatio","getAnimationRange","enableBlending","targetedAnimations","ta","animation","blendingSpeed","disableBlending","setWalkAnim","setRunAnim","setWalkBackAnim","_copySlowAnims","setWalkBackFastAnim","setSlideBackAnim","setIdleAnim","setTurnRightAnim","setTurnRightFastAnim","setTurnLeftAnim","setTurnLeftFastAnim","setStrafeRightAnim","setStrafeRightFastAnim","setStrafeLeftAnim","setStrafeLeftFastAnim","setIdleJumpAnim","setRunJumpAnim","setFallAnim","setWalkKey","toLowerCase","setWalkBackKey","setTurnLeftKey","setTurnRightKey","setStrafeLeftKey","setStrafeRightKey","setJumpKey","setCameraElasticity","b","setCameraTarget","v","copyFrom","cameraCollisionChanged","setNoFirstPerson","skel","f","setMode","setTurningOff","mesh","meshMatrix","getWorldMatrix","_localX","FromFloatArray","_localY","_localZ","actualZ","Cross","Dot","_av2cam","_ffSign","checkAGs","start","reset","_updateTargetValue","enableKeyBoard","registerBeforeRender","stop","unregisterBeforeRender","pauseAnim","resumeAnim","_isAvFacingCamera","forward","position","subtract","dt","getEngine","getDeltaTime","_jump","_doJump","anyMovement","_doMove","_doIdle","play","beginAnimation","y","jumpDist","disp","forwardDist","rotation","alpha","_moveVector","clone","normalize","scaleToRef","moveWithCollisions","length","_endJump","actDisp","_areVectorsEqual","_verticalSlope","v1","v2","abs","x","z","atan","sqrt","u","moving","sign","horizDist","_speedMod","calcMovePOV","_stepLeft","_stepRight","turnAngle","_walkback","_endFreeFall","_groundIt","_unGroundIt","addToRef","target","radius","lowerRadiusLimit","_snapCamera","visibility","subtractToRef","origin","direction","pi","pickWithRay","hit","newPos","pickedPoint","scale","nr","repeat","canvas","getRenderingCanvas","addEventListener","removeEventListener","walk","walkBack","walkBackFast","run","turnLeft","turnLeftFast","turnRight","turnRightFast","strafeLeft","strafeLeftFast","strafeRight","strafeRightFast","jump","idle"],"mappings":"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","file":"CharacterController.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"babylonjs\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"babylonjs\"], factory);\n\telse {\n\t\tvar a = typeof exports === 'object' ? factory(require(\"babylonjs\")) : factory(root[\"BABYLON\"]);\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(window, function(__WEBPACK_EXTERNAL_MODULE__0__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","import {\r\n    Skeleton,\r\n    ArcRotateCamera,\r\n    Vector3,\r\n    Mesh,\r\n    Scene,\r\n    Ray,\r\n    PickingInfo,\r\n    AnimationGroup,\r\n    TransformNode,\r\n    Matrix\r\n} from \"babylonjs\"\r\n\r\nexport class CharacterController {\r\n\r\n    private _avatar: Mesh;\r\n    private _skeleton: Skeleton;\r\n    private _camera: ArcRotateCamera;\r\n    private _scene: Scene;\r\n\r\n    //avatar speed in meters/second\r\n    private _walkSpeed: number = 3;\r\n    private _walkFastSpeed: number = this._walkSpeed * 2;\r\n    private _runSpeed: number = this._walkSpeed * 2;\r\n    private _backSpeed: number = this._walkSpeed / 2;\r\n    private _backFastSpeed: number = this._backSpeed * 2;\r\n    private _jumpSpeed: number = this._walkSpeed * 2;\r\n    private _leftSpeed: number = this._walkSpeed / 2;\r\n    private _leftFastSpeed: number = this._leftSpeed * 2;\r\n    private _rightSpeed: number = this._walkSpeed / 2;\r\n    private _rightFastSpeed: number = this._rightSpeed * 2;\r\n    //trun speed in radian per second (equivalent to 180 degree/second by default)\r\n    private _turnSpeed: number = Math.PI / 8;\r\n    private _turnFastSpeed: number = this._turnSpeed * 2;\r\n    private _gravity: number = 9.8;\r\n    //slopeLimit in degrees\r\n    private _minSlopeLimit: number = 30;\r\n    private _maxSlopeLimit: number = 45;\r\n    //slopeLimit in radians\r\n    private _sl: number = Math.PI * this._minSlopeLimit / 180;\r\n    private _sl2: number = Math.PI * this._maxSlopeLimit / 180;\r\n\r\n    //The av will step up a stair only if it is closer to the ground than the indicated value.\r\n    private _stepOffset: number = 0.25;\r\n    //toal amount by which the av has moved up\r\n    private _vMoveTot: number = 0;\r\n    //position of av when it started moving up\r\n    private _vMovStartPos: Vector3 = Vector3.Zero();\r\n\r\n    //animations\r\n    private _walk: _AnimData = new _AnimData(\"walk\");\r\n    private _walkBack: _AnimData = new _AnimData(\"walkBack\");\r\n    private _walkBackFast: _AnimData = new _AnimData(\"walkBackFast\");\r\n    private _idle: _AnimData = new _AnimData(\"idle\");\r\n    private _idleJump: _AnimData = new _AnimData(\"idleJump\");\r\n    private _run: _AnimData = new _AnimData(\"run\");\r\n    private _runJump: _AnimData = new _AnimData(\"runJump\");\r\n    private _fall: _AnimData = new _AnimData(\"fall\");\r\n    private _turnLeft: _AnimData = new _AnimData(\"turnLeft\");\r\n    private _turnLeftFast: _AnimData = new _AnimData(\"turnLeftFast\");\r\n    private _turnRight: _AnimData = new _AnimData(\"turnRight\");\r\n    private _turnRightFast: _AnimData = new _AnimData(\"turnRightFast\");\r\n    private _strafeLeft: _AnimData = new _AnimData(\"strafeLeft\");\r\n    private _strafeLeftFast: _AnimData = new _AnimData(\"strafeLeftFast\");\r\n    private _strafeRight: _AnimData = new _AnimData(\"strafeRight\");\r\n    private _strafeRightFast: _AnimData = new _AnimData(\"strafeRightFast\");\r\n    private _slideBack: _AnimData = new _AnimData(\"slideBack\");\r\n\r\n    private _anims: _AnimData[] = [this._walk, this._walkBack, this._walkBackFast, this._idle, this._idleJump, this._run, this._runJump, this._fall, this._turnLeft, this._turnLeftFast, this._turnRight, this._turnRightFast, this._strafeLeft, this._strafeLeftFast, this._strafeRight, this._strafeRightFast, this._slideBack];\r\n\r\n    //move keys\r\n    private _walkKey: string = \"w\";\r\n    private _walkBackKey: string = \"s\";\r\n    private _turnLeftKey: string = \"a\";\r\n    private _turnRightKey: string = \"d\";\r\n    private _strafeLeftKey: string = \"q\";\r\n    private _strafeRightKey: string = \"e\";\r\n    private _jumpKey: string = \" \";\r\n\r\n    private _elasticCamera: boolean = true;\r\n    private _cameraTarget: Vector3 = Vector3.Zero();\r\n    //should we go into first person view when camera is near avatar (radius is lowerradius limit)\r\n    private _noFirstPerson: boolean = false;\r\n\r\n    public setAvatar(avatar: Mesh) {\r\n        this._avatar = avatar;\r\n    }\r\n\r\n    public setAvatarSkeleton(skeleton: Skeleton) {\r\n        this._skeleton = skeleton;\r\n        this.checkAnims(skeleton);\r\n    }\r\n\r\n    public setSlopeLimit(minSlopeLimit: number, maxSlopeLimit: number) {\r\n        this._minSlopeLimit = minSlopeLimit;\r\n        this._maxSlopeLimit = maxSlopeLimit;\r\n\r\n        this._sl = Math.PI * minSlopeLimit / 180;\r\n        this._sl2 = Math.PI * this._maxSlopeLimit / 180;\r\n    }\r\n\r\n    /**\r\n     * The av will step up a stair only if it is closer to the ground than the indicated value.\r\n     * Default value is 0.25 m\r\n     */\r\n    public setStepOffset(stepOffset: number) {\r\n        this._stepOffset = stepOffset;\r\n    }\r\n\r\n    public setWalkSpeed(n: number) {\r\n        this._walkSpeed = n;\r\n    }\r\n    public setRunSpeed(n: number) {\r\n        this._runSpeed = n;\r\n    }\r\n    public setBackSpeed(n: number) {\r\n        this._backSpeed = n;\r\n    }\r\n    public setBackFastSpeed(n: number) {\r\n        this._backFastSpeed = n;\r\n    }\r\n    public setJumpSpeed(n: number) {\r\n        this._jumpSpeed = n;\r\n    }\r\n    public setLeftSpeed(n: number) {\r\n        this._leftSpeed = n;\r\n    }\r\n    public setLeftFastSpeed(n: number) {\r\n        this._leftFastSpeed = n;\r\n    }\r\n    public setRightSpeed(n: number) {\r\n        this._rightSpeed = n;\r\n    }\r\n    public setRightFastSpeed(n: number) {\r\n        this._rightFastSpeed = n;\r\n    }\r\n    // get turnSpeed in degrees per second.\r\n    // store in radians per second\r\n    public setTurnSpeed(n: number) {\r\n        this._turnSpeed = n * Math.PI / 180;\r\n    }\r\n    public setTurnFastSpeed(n: number) {\r\n        this._turnFastSpeed = n * Math.PI / 180;\r\n    }\r\n    public setGravity(n: number) {\r\n        this._gravity = n;\r\n    }\r\n\r\n    /**\r\n     * Use this to provide animationGroups to the character controller.\r\n     * Provide the AnimationGroups using a Map\r\n     * In this Map the key would be the character controller animation name and\r\n     * the key value would be the animationGroup.\r\n     * Example:\r\n     * let myWalkAnimationGroup:AnimationGroup = ...;\r\n     * let agMap:{} = {\r\n     *  \"walk\":myWalkAnimationGroup,\r\n     *   ....\r\n     * }\r\n     * \r\n     * @param agMap a map of character controller animation name to animationGroup\r\n     */\r\n    public setAnimationGroups(agMap: {}) {\r\n        this._isAG = true;\r\n        for (let anim of this._anims) {\r\n            if (agMap[anim._name] != null) {\r\n                anim._ag = agMap[anim._name];\r\n                anim._exist = true;\r\n                anim._ag.name\r\n            }\r\n        }\r\n        this._checkFastAnims();\r\n    }\r\n    /**\r\n     * Use this to provide AnimationRanges to the character controller.\r\n     * Provide the AnimationRanges using a Map\r\n     * In this Map the key would be the character controller animation name and\r\n     * the key value would be the animation range name or an object with animation range data.\r\n     * example:\r\n     * let arMap = {\r\n     *  \"walk\":\"myWalk\",\r\n     *  \"run\" : {\"name\":\"myRun\",\"rate\":1},\r\n     *  \"idle\" : {\"name\":\"myIdle\",\"loop\":true,\"rate\":1},\r\n     *  ....\r\n     * }\r\n     * \r\n     * @param arMap a map of character controller animation name to animationRange data\r\n     */\r\n\r\n    public setAnimationRanges(arMap: {}) {\r\n        this._isAG = false;\r\n        let arData: string | {};\r\n        for (let anim of this._anims) {\r\n            arData = arMap[anim._name];\r\n            if (arData != null) {\r\n                if (arData instanceof Object) {\r\n                    if (arData[\"name\"]) anim._name = arData[\"name\"];\r\n                    if (arData[\"loop\"]) anim._loop = arData[\"loop\"];\r\n                    if (arData[\"rate\"]) anim._loop = arData[\"rate\"];\r\n                } else {\r\n                    anim._name = arData;\r\n                }\r\n                anim._exist = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    private _setAnim(anim: _AnimData, rangeName?: string | AnimationGroup, rate?: number, loop?: boolean) {\r\n        if (!this._isAG && this._skeleton == null) return;\r\n        if (loop != null) anim._loop = loop;\r\n        if (!this._isAG) {\r\n            if (rangeName != null) anim._name = <string>rangeName;\r\n            if (rate != null) anim._rate = rate;\r\n            if (this._skeleton.getAnimationRange(anim._name) != null) {\r\n                anim._exist = true;\r\n            } else {\r\n                anim._exist = false;\r\n            }\r\n        } else {\r\n            if (rangeName != null) {\r\n                anim._ag = <AnimationGroup>rangeName;\r\n                anim._exist = true;\r\n            }\r\n            if (rate != null && anim._exist) {\r\n                anim._rate = rate;\r\n                anim._ag.speedRatio = rate;\r\n            }\r\n        }\r\n    }\r\n\r\n    public enableBlending(n: number) {\r\n        if (this._isAG) {\r\n            for (let anim of this._anims) {\r\n                if (anim._exist) {\r\n                    let ar: AnimationGroup = anim._ag;\r\n                    for (let ta of ar.targetedAnimations) {\r\n                        ta.animation.enableBlending = true;\r\n                        ta.animation.blendingSpeed = n;\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            this._skeleton.enableBlending(n);\r\n        }\r\n    }\r\n\r\n    public disableBlending() {\r\n        if (this._isAG) {\r\n            for (let anim of this._anims) {\r\n                if (anim._exist) {\r\n                    let ar: AnimationGroup = anim._ag;\r\n                    for (let ta of ar.targetedAnimations) {\r\n                        ta.animation.enableBlending = false;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    //setters for animations\r\n    public setWalkAnim(rangeName: string | AnimationGroup, rate: number, loop: boolean) {\r\n        this._setAnim(this._walk, rangeName, rate, loop);\r\n    }\r\n    public setRunAnim(rangeName: string | AnimationGroup, rate: number, loop: boolean) {\r\n        this._setAnim(this._run, rangeName, rate, loop);\r\n    }\r\n    public setWalkBackAnim(rangeName: string | AnimationGroup, rate: number, loop: boolean) {\r\n        this._setAnim(this._walkBack, rangeName, rate, loop);\r\n        this._copySlowAnims(this._walkBackFast, this._walkBack);\r\n    }\r\n    public setWalkBackFastAnim(rangeName: string | AnimationGroup, rate: number, loop: boolean) {\r\n        this._setAnim(this._walkBackFast, rangeName, rate, loop);\r\n    }\r\n    public setSlideBackAnim(rangeName: string | AnimationGroup, rate: number, loop: boolean) {\r\n        this._setAnim(this._slideBack, rangeName, rate, loop);\r\n    }\r\n    public setIdleAnim(rangeName: string | AnimationGroup, rate: number, loop: boolean) {\r\n        this._setAnim(this._idle, rangeName, rate, loop);\r\n    }\r\n    public setTurnRightAnim(rangeName: string | AnimationGroup, rate: number, loop: boolean) {\r\n        this._setAnim(this._turnRight, rangeName, rate, loop);\r\n        this._copySlowAnims(this._turnRightFast, this._turnRight);\r\n    }\r\n    public setTurnRightFastAnim(rangeName: string | AnimationGroup, rate: number, loop: boolean) {\r\n        this._setAnim(this._turnRightFast, rangeName, rate, loop);\r\n    }\r\n    public setTurnLeftAnim(rangeName: string | AnimationGroup, rate: number, loop: boolean) {\r\n        this._setAnim(this._turnLeft, rangeName, rate, loop);\r\n        this._copySlowAnims(this._turnLeftFast, this._turnLeft);\r\n    }\r\n    public setTurnLeftFastAnim(rangeName: string | AnimationGroup, rate: number, loop: boolean) {\r\n        this._setAnim(this._turnLeftFast, rangeName, rate, loop);\r\n    }\r\n    public setStrafeRightAnim(rangeName: string | AnimationGroup, rate: number, loop: boolean) {\r\n        this._setAnim(this._strafeRight, rangeName, rate, loop);\r\n        this._copySlowAnims(this._strafeRightFast, this._strafeRight);\r\n    }\r\n    public setStrafeRightFastAnim(rangeName: string | AnimationGroup, rate: number, loop: boolean) {\r\n        this._setAnim(this._strafeRightFast, rangeName, rate, loop);\r\n    }\r\n    public setStrafeLeftAnim(rangeName: string | AnimationGroup, rate: number, loop: boolean) {\r\n        this._setAnim(this._strafeLeft, rangeName, rate, loop);\r\n        this._copySlowAnims(this._strafeLeftFast, this._strafeLeft);\r\n    }\r\n    public setStrafeLeftFastAnim(rangeName: string | AnimationGroup, rate: number, loop: boolean) {\r\n        this._setAnim(this._strafeLeftFast, rangeName, rate, loop);\r\n    }\r\n    public setIdleJumpAnim(rangeName: string | AnimationGroup, rate: number, loop: boolean) {\r\n        this._setAnim(this._idleJump, rangeName, rate, loop);\r\n    }\r\n    public setRunJumpAnim(rangeName: string | AnimationGroup, rate: number, loop: boolean) {\r\n        this._setAnim(this._runJump, rangeName, rate, loop);\r\n    }\r\n    public setFallAnim(rangeName: string | AnimationGroup, rate: number, loop: boolean) {\r\n        this._setAnim(this._fall, rangeName, rate, loop);\r\n    }\r\n\r\n    // setters for keys\r\n    public setWalkKey(key: string) {\r\n        this._walkKey = key.toLowerCase();\r\n    }\r\n    public setWalkBackKey(key: string) {\r\n        this._walkBackKey = key.toLowerCase();\r\n    }\r\n    public setTurnLeftKey(key: string) {\r\n        this._turnLeftKey = key.toLowerCase();\r\n    }\r\n    public setTurnRightKey(key: string) {\r\n        this._turnRightKey = key.toLowerCase();\r\n    }\r\n    public setStrafeLeftKey(key: string) {\r\n        this._strafeLeftKey = key.toLowerCase();\r\n    }\r\n    public setStrafeRightKey(key: string) {\r\n        this._strafeRightKey = key.toLowerCase();\r\n    }\r\n    public setJumpKey(key: string) {\r\n        this._jumpKey = key.toLowerCase();\r\n    }\r\n\r\n    public setCameraElasticity(b: boolean) {\r\n        this._elasticCamera = b;\r\n    }\r\n    public setCameraTarget(v: Vector3) {\r\n        this._cameraTarget.copyFrom(v);\r\n    }\r\n\r\n\r\n    /**\r\n     * user should call this whenever the user changes the camera checkCollision \r\n     * property\r\n     * \r\n     */\r\n    public cameraCollisionChanged() {\r\n        this._savedCameraCollision = this._camera.checkCollisions;\r\n    }\r\n    public setNoFirstPerson(b: boolean) {\r\n        this._noFirstPerson = b;\r\n    }\r\n\r\n\r\n    private checkAnims(skel: Skeleton) {\r\n        for (let anim of this._anims) {\r\n            if (skel != null) {\r\n                if (skel.getAnimationRange(anim._name) != null) anim._exist = true;\r\n            } else {\r\n                anim._exist = false;\r\n            }\r\n        }\r\n        this._checkFastAnims();\r\n    }\r\n\r\n    /**\r\n     * if fast anims do not exist then use their slow counterpart as them but double the rate at which they play\r\n     */\r\n    private _checkFastAnims() {\r\n        this._copySlowAnims(this._walkBackFast, this._walkBack)\r\n        this._copySlowAnims(this._turnRightFast, this._turnRightFast);\r\n        this._copySlowAnims(this._turnLeftFast, this._turnLeft);\r\n        this._copySlowAnims(this._strafeRightFast, this._strafeRight);\r\n        this._copySlowAnims(this._strafeLeftFast, this._strafeLeft);\r\n    }\r\n\r\n    private _copySlowAnims(f: _AnimData, s: _AnimData) {\r\n        if (f._exist) return;\r\n        if (!s._exist) return;\r\n        f._exist = true;\r\n        f._ag = s._ag;\r\n        f._name = s._name;\r\n        f._rate = s._rate * 2;\r\n    }\r\n\r\n    /**\r\n     * Use this to make the  character controller suitable for a isometeric/top down games or  fps/third person game.\r\n     * 1 In isometric/top down games the camera direction has no bearing on avatar movement.\r\n     * 0 In fps/third person game rotating the camera around the avatar , rotates the avatr too.\r\n     */\r\n    private mode = 0;\r\n    private _saveMode = 0;\r\n    public setMode(n: number) {\r\n        this.mode = n;\r\n        this._saveMode = n;\r\n    }\r\n    /**\r\n     * Use this to set  turning off.\r\n     * When turining is off \r\n     * a) turn left or turn right keys result in avatar facing and moving left or right with respect to camera.\r\n     * b) walkback/runback key results in avatar facing back and walking/running towards camera.\r\n     * \r\n     * This setting has no effect when mode is 1.\r\n     * \r\n     * @param b \r\n     */\r\n    public setTurningOff(b: boolean) {\r\n        this._noRot = b;\r\n    }\r\n\r\n    /**\r\n        * checks if a have left hand , right hand issue.\r\n        * In other words if a mesh is a LHS mesh in RHS system or \r\n        * a RHS mesh in LHS system\r\n        * The X axis will be reversed in such cases.\r\n        * thus Cross product of X and Y should be inverse of Z.\r\n        * BABYLONJS GLB models are RHS and exhibit this behavior\r\n        * \r\n        */\r\n    private _isRHS = false;\r\n    private _signRHS = -1;\r\n    private _setRHS(mesh: TransformNode) {\r\n        const meshMatrix: Matrix = mesh.getWorldMatrix();\r\n        const _localX = Vector3.FromFloatArray(meshMatrix.m, 0);\r\n        const _localY = Vector3.FromFloatArray(meshMatrix.m, 4);\r\n        const _localZ = Vector3.FromFloatArray(meshMatrix.m, 8);\r\n        const actualZ = Vector3.Cross(_localX, _localY);\r\n        //same direction or opposite direction of Z\r\n        if (Vector3.Dot(actualZ, _localZ) < 0) {\r\n            this._isRHS = true;\r\n            this._signRHS = 1;\r\n        }\r\n        else {\r\n            this._isRHS = false;\r\n            this._signRHS = -1;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Use setFaceForward(true|false) to indicate that the avatar face  faces forward (true) or backward (false).\r\n     * The avatar face faces forward if its face points to positive local Z axis direction\r\n     */\r\n    private _ffSign;\r\n    //in mode 0, av2cam is used to align avatar with camera , with camera always facing avatar's back\r\n    //note:camera alpha is measured anti-clockwise , avatar rotation is measured clockwise \r\n    private _av2cam;\r\n    public setFaceForward(b: boolean) {\r\n        if (this._isRHS) {\r\n            this._av2cam = b ? Math.PI / 2 : 3 * Math.PI / 2;\r\n            this._ffSign = b ? 1 : -1;\r\n        } else {\r\n            this._av2cam = b ? 3 * Math.PI / 2 : Math.PI / 2;\r\n            this._ffSign = b ? -1 : 1;\r\n        }\r\n    }\r\n\r\n    private checkAGs(agMap: {}) {\r\n        for (let anim of this._anims) {\r\n            if (agMap[anim._name] != null) {\r\n                anim._ag = agMap[anim._name];\r\n                anim._exist = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    private _started: boolean = false;\r\n    public start() {\r\n        if (this._started) return;\r\n        this._started = true;\r\n        this._act.reset();\r\n        this._movFallTime = 0;\r\n        //first time we enter render loop, delta time is zero\r\n        this._idleFallTime = 0.001;\r\n        this._grounded = false;\r\n        this._updateTargetValue();\r\n        this.enableKeyBoard(true);\r\n        this._scene.registerBeforeRender(this._renderer);\r\n    }\r\n\r\n    public stop() {\r\n        if (!this._started) return;\r\n        this._started = false;\r\n        this._scene.unregisterBeforeRender(this._renderer);\r\n        this.enableKeyBoard(false);\r\n        this._prevAnim = null;\r\n    }\r\n\r\n    /**\r\n     * use pauseAnim to stop the charactere controller from playing\r\n     * any animation on the character\r\n     * use this when you want to play your animation instead\r\n     * see also resumeAnim()\r\n     */\r\n    private _stopAnim: boolean = false;\r\n    public pauseAnim() {\r\n        this._stopAnim = true;\r\n    }\r\n\r\n    /**\r\n     * use resumeAnim to resume the character controller playing\r\n     * animations on the character.\r\n     * see also pauseAnim()\r\n     */\r\n    public resumeAnim() {\r\n        this._stopAnim = false;\r\n    }\r\n\r\n    private _prevAnim: _AnimData = null;\r\n    private _avStartPos: Vector3 = Vector3.Zero();\r\n    private _grounded: boolean = false;\r\n    //distance by which AV would move down if in freefall\r\n    private _freeFallDist: number = 0;\r\n\r\n    //how many minimum contiguos frames should the AV have been in free fall\r\n    //before we assume AV is in big freefall.\r\n    //we will use this to remove animation flicker during move down a slope (fall, move, fall move etc)\r\n    //TODO: base this on slope - large slope large count\r\n    private _fallFrameCountMin: number = 50;\r\n    private _fallFrameCount: number = 0;\r\n\r\n    private _inFreeFall: boolean = false;\r\n    private _wasWalking: boolean = false;\r\n    private _wasRunning: boolean = false;\r\n    private _moveVector: Vector3;\r\n\r\n    //used only in mode 1\r\n    //value 1 or -1 , -1 if avatar is facing camera\r\n    //private _notFacingCamera = 1;\r\n\r\n    private _isAvFacingCamera(): number {\r\n        if (Vector3.Dot(this._avatar.forward, this._avatar.position.subtract(this._camera.position)) < 0) return 1\r\n        else return -1;\r\n    }\r\n\r\n    private _moveAVandCamera() {\r\n        this._avStartPos.copyFrom(this._avatar.position);\r\n        let anim: _AnimData = null;\r\n        const dt: number = this._scene.getEngine().getDeltaTime() / 1000;\r\n\r\n        if (this._act._jump && !this._inFreeFall) {\r\n            this._grounded = false;\r\n            this._idleFallTime = 0;\r\n            anim = this._doJump(dt);\r\n        } else if (this.anyMovement() || this._inFreeFall) {\r\n            this._grounded = false;\r\n            this._idleFallTime = 0;\r\n            anim = this._doMove(dt);\r\n        } else if (!this._inFreeFall) {\r\n            anim = this._doIdle(dt);\r\n        }\r\n        if (!this._stopAnim && this._hasAnims && anim != null) {\r\n            if (this._prevAnim !== anim) {\r\n                if (anim._exist) {\r\n                    if (this._isAG) {\r\n                        if (this._prevAnim != null && this._prevAnim._exist) this._prevAnim._ag.stop();\r\n                        anim._ag.play(anim._loop);\r\n                        anim._ag.speedRatio = anim._rate;\r\n                    } else {\r\n                        this._skeleton.beginAnimation(anim._name, anim._loop, anim._rate);\r\n                    }\r\n                }\r\n                this._prevAnim = anim;\r\n            }\r\n        }\r\n        this._updateTargetValue();\r\n        return;\r\n    }\r\n\r\n    //verical position of AV when it is about to start a jump\r\n    private _jumpStartPosY: number = 0;\r\n    //for how long the AV has been in the jump\r\n    private _jumpTime: number = 0;\r\n    private _doJump(dt: number): _AnimData {\r\n\r\n        let anim: _AnimData = null;\r\n        anim = this._runJump;\r\n        if (this._jumpTime === 0) {\r\n            this._jumpStartPosY = this._avatar.position.y;\r\n        }\r\n        //up velocity at the begining of the lastt frame (v=u+at)\r\n        const js: number = this._jumpSpeed - this._gravity * this._jumpTime;\r\n        //distance travelled up since last frame to this frame (s=ut+1/2*at^2)\r\n        const jumpDist: number = js * dt - 0.5 * this._gravity * dt * dt;\r\n        this._jumpTime = this._jumpTime + dt;\r\n\r\n        let forwardDist: number = 0;\r\n        let disp: Vector3;\r\n        if (this.mode != 1 && !this._noRot) this._avatar.rotation.y = this._av2cam - this._camera.alpha;\r\n        if (this._wasRunning || this._wasWalking) {\r\n            if (this._wasRunning) {\r\n                forwardDist = this._runSpeed * dt;\r\n            } else if (this._wasWalking) {\r\n                forwardDist = this._walkSpeed * dt;\r\n            }\r\n            //find out in which horizontal direction the AV was moving when it started the jump\r\n            disp = this._moveVector.clone();\r\n            disp.y = 0;\r\n            disp = disp.normalize();\r\n            disp.scaleToRef(forwardDist, disp);\r\n            disp.y = jumpDist;\r\n        } else {\r\n            disp = new Vector3(0, jumpDist, 0);\r\n            anim = this._idleJump;\r\n            //this.avatar.ellipsoid.y=this._ellipsoid.y/2;\r\n        }\r\n        //moveWithCollision only seems to happen if length of displacment is atleast 0.001\r\n        this._avatar.moveWithCollisions(disp);\r\n        if (jumpDist < 0) {\r\n            //this.avatar.ellipsoid.y=this._ellipsoid.y;\r\n            //check if going up a slope or back on flat ground \r\n            if ((this._avatar.position.y > this._avStartPos.y) || ((this._avatar.position.y === this._avStartPos.y) && (disp.length() > 0.001))) {\r\n                this._endJump();\r\n            } else if (this._avatar.position.y < this._jumpStartPosY) {\r\n                //the avatar is below the point from where it started the jump\r\n                //so it is either in free fall or is sliding along a downward slope\r\n                //\r\n                //if the actual displacemnt is same as the desired displacement then AV is in freefall\r\n                //else it is on a slope\r\n                const actDisp: Vector3 = this._avatar.position.subtract(this._avStartPos);\r\n                if (!(this._areVectorsEqual(actDisp, disp, 0.001))) {\r\n                    //AV is on slope\r\n                    //Should AV continue to slide or stop?\r\n                    //if slope is less steeper than acceptable then stop else slide\r\n                    if (this._verticalSlope(actDisp) <= this._sl) {\r\n                        this._endJump();\r\n                    }\r\n                } else {\r\n                    anim = this._fall;\r\n                }\r\n            }\r\n        }\r\n        return anim;\r\n    }\r\n\r\n    /**\r\n     * does cleanup at the end of a jump\r\n     */\r\n    private _endJump() {\r\n        this._act._jump = false;\r\n        this._jumpTime = 0;\r\n        this._wasWalking = false;\r\n        this._wasRunning = false;\r\n    }\r\n\r\n    /**\r\n     * checks if two vectors v1 and v2 are equal within a precision of p\r\n     */\r\n    private _areVectorsEqual(v1: Vector3, v2: Vector3, p: number) {\r\n        return ((Math.abs(v1.x - v2.x) < p) && (Math.abs(v1.y - v2.y) < p) && (Math.abs(v1.z - v2.z) < p));\r\n    }\r\n\r\n    /*\r\n     * returns the slope (in radians) of a vector in the vertical plane\r\n     */\r\n    private _verticalSlope(v: Vector3): number {\r\n        return Math.atan(Math.abs(v.y / Math.sqrt(v.x * v.x + v.z * v.z)));\r\n    }\r\n\r\n    //for how long has the av been falling while moving\r\n    private _movFallTime: number = 0;\r\n    private _sign = 1;\r\n    private _isTurning = false;\r\n    private _noRot = false;\r\n    private _doMove(dt: number): _AnimData {\r\n\r\n        //initial down velocity\r\n        const u: number = this._movFallTime * this._gravity\r\n        //calculate the distance by which av should fall down since last frame\r\n        //assuming it is in freefall\r\n        this._freeFallDist = u * dt + this._gravity * dt * dt / 2;\r\n\r\n        this._movFallTime = this._movFallTime + dt;\r\n\r\n        let moving: boolean = false;\r\n        let anim: _AnimData = null;\r\n\r\n        if (this._inFreeFall) {\r\n            this._moveVector.y = -this._freeFallDist;\r\n            moving = true;\r\n        } else {\r\n            this._wasWalking = false;\r\n            this._wasRunning = false;\r\n\r\n            let sign: number;\r\n            let horizDist: number = 0;\r\n            switch (true) {\r\n                case (this._act._stepLeft):\r\n                    sign = this._signRHS * this._isAvFacingCamera();\r\n                    horizDist = this._leftSpeed * dt;\r\n                    if (this._act._speedMod) {\r\n                        horizDist = this._leftFastSpeed * dt;\r\n                        anim = (-this._ffSign * sign > 0) ? this._strafeLeftFast : this._strafeRightFast;\r\n                    } else {\r\n                        anim = (-this._ffSign * sign > 0) ? this._strafeLeft : this._strafeRight;\r\n                    }\r\n\r\n                    this._moveVector = this._avatar.calcMovePOV(sign * horizDist, -this._freeFallDist, 0);\r\n                    moving = true;\r\n                    break;\r\n                case (this._act._stepRight):\r\n                    sign = -this._signRHS * this._isAvFacingCamera();\r\n                    horizDist = this._rightSpeed * dt;\r\n                    if (this._act._speedMod) {\r\n                        horizDist = this._rightFastSpeed * dt;\r\n                        anim = (-this._ffSign * sign > 0) ? this._strafeLeftFast : this._strafeRightFast;\r\n                    } else {\r\n                        anim = (-this._ffSign * sign > 0) ? this._strafeLeft : this._strafeRight;\r\n                    }\r\n                    this._moveVector = this._avatar.calcMovePOV(sign * horizDist, -this._freeFallDist, 0);\r\n                    moving = true;\r\n                    break;\r\n                case (this._act._walk || (this._noRot && this.mode == 0)):\r\n                    if (this._act._speedMod) {\r\n                        this._wasRunning = true;\r\n                        horizDist = this._walkFastSpeed * dt;\r\n                        anim = this._run;\r\n                    } else {\r\n                        this._wasWalking = true;\r\n                        horizDist = this._walkSpeed * dt;\r\n                        anim = this._walk;\r\n                    }\r\n                    this._moveVector = this._avatar.calcMovePOV(0, -this._freeFallDist, this._ffSign * horizDist);\r\n                    moving = true;\r\n                    break;\r\n                case (this._act._walkback):\r\n                    horizDist = this._backSpeed * dt;\r\n                    if (this._act._speedMod) {\r\n                        horizDist = this._backFastSpeed * dt;\r\n                        anim = this._walkBackFast;\r\n                    } else {\r\n                        anim = this._walkBack;\r\n                    }\r\n                    this._moveVector = this._avatar.calcMovePOV(0, -this._freeFallDist, -this._ffSign * horizDist);\r\n                    moving = true;\r\n                    break;\r\n\r\n            }\r\n\r\n        }\r\n\r\n        if (!(this._noRot && this.mode == 0) && (!this._act._stepLeft && !this._act._stepRight) && (this._act._turnLeft || this._act._turnRight)) {\r\n            let turnAngle = this._turnSpeed * dt;\r\n            if (this._act._speedMod) {\r\n                turnAngle = 2 * turnAngle;\r\n            }\r\n            if (this.mode == 1) {\r\n                // while turining, the avatar could start facing away from camera and end up facing camera.\r\n                // we should not switch turning direction during this transition\r\n                if (!this._isTurning) {\r\n                    // if (this._act.name != this._act.prevName) {\r\n                    // this._act.prevName = this._act.name;\r\n                    this._sign = -this._ffSign * this._isAvFacingCamera();\r\n                    if (this._isRHS) this._sign = - this._sign;\r\n                    this._isTurning = true;\r\n                }\r\n                let a = this._sign;\r\n                if (this._act._turnLeft) {\r\n                    if (this._act._walk) { }\r\n                    else if (this._act._walkback) a = -this._sign;\r\n                    else {\r\n                        anim = (this._sign > 0) ? this._turnRight : this._turnLeft;\r\n                    }\r\n                } else {\r\n                    if (this._act._walk) a = -this._sign;\r\n                    else if (this._act._walkback) { }\r\n                    else {\r\n                        a = -this._sign;\r\n                        anim = (this._sign > 0) ? this._turnLeft : this._turnRight;\r\n                    }\r\n                }\r\n                this._avatar.rotation.y = this._avatar.rotation.y + turnAngle * a;\r\n            } else {\r\n                let a = 1;\r\n                if (this._act._turnLeft) {\r\n                    if (this._act._walkback) a = -1;\r\n                    if (!moving) anim = this._turnLeft;\r\n                } else {\r\n                    if (this._act._walk) a = -1;\r\n                    if (!moving) { a = -1; anim = this._turnRight; }\r\n                }\r\n                this._camera.alpha = this._camera.alpha + turnAngle * a;\r\n            }\r\n        }\r\n\r\n        if (this.mode != 1) {\r\n            if (this._noRot) {\r\n                switch (true) {\r\n                    case (this._act._walk && this._act._turnRight):\r\n                        this._avatar.rotation.y = this._av2cam - this._camera.alpha + Math.PI / 4;\r\n                        break;\r\n                    case (this._act._walk && this._act._turnLeft):\r\n                        this._avatar.rotation.y = this._av2cam - this._camera.alpha - Math.PI / 4;\r\n                        break;\r\n                    case (this._act._walkback && this._act._turnRight):\r\n                        this._avatar.rotation.y = this._av2cam - this._camera.alpha + 3 * Math.PI / 4;\r\n                        break;\r\n                    case (this._act._walkback && this._act._turnLeft):\r\n                        this._avatar.rotation.y = this._av2cam - this._camera.alpha - 3 * Math.PI / 4;\r\n                        break;\r\n                    case (this._act._walk):\r\n                        this._avatar.rotation.y = this._av2cam - this._camera.alpha;\r\n                        break;\r\n                    case (this._act._walkback):\r\n                        this._avatar.rotation.y = this._av2cam - this._camera.alpha + Math.PI;\r\n                        break;\r\n                    case (this._act._turnRight):\r\n                        this._avatar.rotation.y = this._av2cam - this._camera.alpha + Math.PI / 2;\r\n                        break;\r\n                    case (this._act._turnLeft):\r\n                        this._avatar.rotation.y = this._av2cam - this._camera.alpha - Math.PI / 2;\r\n                        break;\r\n                }\r\n            } else {\r\n                this._avatar.rotation.y = this._av2cam - this._camera.alpha;\r\n            }\r\n        } else {\r\n\r\n        }\r\n\r\n        if (moving) {\r\n            if (this._moveVector.length() > 0.001) {\r\n                this._avatar.moveWithCollisions(this._moveVector);\r\n                //walking up a slope\r\n                if (this._avatar.position.y > this._avStartPos.y) {\r\n                    const actDisp: Vector3 = this._avatar.position.subtract(this._avStartPos);\r\n                    const _sl: number = this._verticalSlope(actDisp);\r\n                    if (_sl >= this._sl2) {\r\n                        //this._climbingSteps=true;\r\n                        //is av trying to go up steps\r\n                        if (this._stepOffset > 0) {\r\n                            if (this._vMoveTot == 0) {\r\n                                //if just started climbing note down the position\r\n                                this._vMovStartPos.copyFrom(this._avStartPos);\r\n                            }\r\n                            this._vMoveTot = this._vMoveTot + (this._avatar.position.y - this._avStartPos.y);\r\n                            if (this._vMoveTot > this._stepOffset) {\r\n                                //move av back to its position at begining of steps\r\n                                this._vMoveTot = 0;\r\n                                this._avatar.position.copyFrom(this._vMovStartPos);\r\n                                this._endFreeFall();\r\n                            }\r\n                        } else {\r\n                            //move av back to old position\r\n                            this._avatar.position.copyFrom(this._avStartPos);\r\n                            this._endFreeFall();\r\n                        }\r\n                    } else {\r\n                        this._vMoveTot = 0;\r\n                        if (_sl > this._sl) {\r\n                            //av is on a steep slope , continue increasing the moveFallTIme to deaccelerate it\r\n                            this._fallFrameCount = 0;\r\n                            this._inFreeFall = false;\r\n                        } else {\r\n                            //continue walking\r\n                            this._endFreeFall();\r\n                        }\r\n                    }\r\n                } else if ((this._avatar.position.y) < this._avStartPos.y) {\r\n                    const actDisp: Vector3 = this._avatar.position.subtract(this._avStartPos);\r\n                    if (!(this._areVectorsEqual(actDisp, this._moveVector, 0.001))) {\r\n                        //AV is on slope\r\n                        //Should AV continue to slide or walk?\r\n                        //if slope is less steeper than acceptable then walk else slide\r\n                        if (this._verticalSlope(actDisp) <= this._sl) {\r\n                            this._endFreeFall();\r\n                        } else {\r\n                            //av is on a steep slope , continue increasing the moveFallTIme to deaccelerate it\r\n                            this._fallFrameCount = 0;\r\n                            this._inFreeFall = false;\r\n                        }\r\n                    } else {\r\n                        this._inFreeFall = true;\r\n                        this._fallFrameCount++;\r\n                        //AV could be running down a slope which mean freefall,run,frefall run ...\r\n                        //to remove anim flicker, check if AV has been falling down continously for last few consecutive frames\r\n                        //before changing to free fall animation\r\n                        if (this._fallFrameCount > this._fallFrameCountMin) {\r\n                            anim = this._fall;\r\n                        }\r\n                    }\r\n                } else {\r\n                    this._endFreeFall();\r\n                }\r\n            }\r\n        }\r\n        return anim;\r\n    }\r\n\r\n    private _endFreeFall(): void {\r\n        this._movFallTime = 0;\r\n        this._fallFrameCount = 0;\r\n        this._inFreeFall = false;\r\n    }\r\n\r\n    //for how long has the av been falling while idle (not moving)\r\n    private _idleFallTime: number = 0;\r\n    private _doIdle(dt: number): _AnimData {\r\n        if (this._grounded) {\r\n            return this._idle;\r\n        }\r\n        this._wasWalking = false;\r\n        this._wasRunning = false;\r\n        this._movFallTime = 0;\r\n        let anim: _AnimData = this._idle;\r\n        this._fallFrameCount = 0;\r\n\r\n\r\n        if (dt === 0) {\r\n            this._freeFallDist = 5;\r\n        } else {\r\n            const u: number = this._idleFallTime * this._gravity\r\n            this._freeFallDist = u * dt + this._gravity * dt * dt / 2;\r\n            this._idleFallTime = this._idleFallTime + dt;\r\n        }\r\n        //if displacement is less than 0.01(? need to verify further) then \r\n        //moveWithDisplacement down against a surface seems to push the AV up by a small amount!!\r\n        if (this._freeFallDist < 0.01) return anim;\r\n        const disp: Vector3 = new Vector3(0, -this._freeFallDist, 0);\r\n        if (this.mode != 1 && !this._noRot) this._avatar.rotation.y = this._av2cam - this._camera.alpha;\r\n        this._avatar.moveWithCollisions(disp);\r\n        if ((this._avatar.position.y > this._avStartPos.y) || (this._avatar.position.y === this._avStartPos.y)) {\r\n            //                this.grounded = true;\r\n            //                this.idleFallTime = 0;\r\n            this._groundIt();\r\n        } else if (this._avatar.position.y < this._avStartPos.y) {\r\n            //AV is going down. \r\n            //AV is either in free fall or is sliding along a downward slope\r\n            //\r\n            //if the actual displacemnt is same as the desired displacement then AV is in freefall\r\n            //else it is on a slope\r\n            const actDisp: Vector3 = this._avatar.position.subtract(this._avStartPos);\r\n            if (!(this._areVectorsEqual(actDisp, disp, 0.001))) {\r\n                //AV is on slope\r\n                //Should AV continue to slide or stop?\r\n                //if slope is less steeper than accebtable then stop else slide\r\n                if (this._verticalSlope(actDisp) <= this._sl) {\r\n                    //                        this.grounded = true;\r\n                    //                        this.idleFallTime = 0;\r\n                    this._groundIt();\r\n                    this._avatar.position.copyFrom(this._avStartPos);\r\n                } else {\r\n                    this._unGroundIt();\r\n                    anim = this._slideBack;\r\n                }\r\n            }\r\n        }\r\n        return anim;\r\n    }\r\n\r\n    private _groundFrameCount = 0;\r\n    private _groundFrameMax = 10;\r\n    /**\r\n     * donot ground immediately\r\n     * wait few more frames\r\n     */\r\n    private _groundIt(): void {\r\n        this._groundFrameCount++;\r\n        if (this._groundFrameCount > this._groundFrameMax) {\r\n            this._grounded = true;\r\n            this._idleFallTime = 0;\r\n        }\r\n    }\r\n    private _unGroundIt() {\r\n        this._grounded = false;\r\n        this._groundFrameCount = 0;\r\n    }\r\n\r\n    private _savedCameraCollision: boolean = true;\r\n    private _inFP = false;\r\n    private _updateTargetValue() {\r\n        //donot move camera if av is trying to clinb steps\r\n        if (this._vMoveTot == 0)\r\n            this._avatar.position.addToRef(this._cameraTarget, this._camera.target);\r\n\r\n        if (this._camera.radius > this._camera.lowerRadiusLimit) { if (this._elasticCamera) this._snapCamera(); }\r\n\r\n        if (this._camera.radius <= this._camera.lowerRadiusLimit) {\r\n            if (!this._noFirstPerson && !this._inFP) {\r\n                this._avatar.visibility = 0;\r\n                this._camera.checkCollisions = false;\r\n                this._saveMode = this.mode;\r\n                this.mode = 0;\r\n                this._inFP = true;\r\n            }\r\n        } else {\r\n            this._inFP = false;\r\n            this.mode = this._saveMode;\r\n            this._avatar.visibility = 1;\r\n            this._camera.checkCollisions = this._savedCameraCollision;\r\n        }\r\n    }\r\n\r\n    private _ray: Ray = new Ray(Vector3.Zero(), Vector3.One(), 1);\r\n    private _rayDir: Vector3 = Vector3.Zero();\r\n    //camera seems to get stuck into things\r\n    //should move camera away from things by a value of cameraSkin\r\n    private _cameraSkin: number = 0.5;\r\n    private _skip: number = 0;\r\n    private _snapCamera() {\r\n        //            if(this.skip<120) {\r\n        //                this.skip++;\r\n        //                return;\r\n        //            }\r\n        //            this.skip=0;\r\n        //get vector from av (camera.target) to camera\r\n        this._camera.position.subtractToRef(this._camera.target, this._rayDir);\r\n        //start ray from av to camera\r\n        this._ray.origin = this._camera.target;\r\n        this._ray.length = this._rayDir.length();\r\n        this._ray.direction = this._rayDir.normalize();\r\n\r\n        const pi: PickingInfo = this._scene.pickWithRay(this._ray, (mesh) => {\r\n            //if(mesh==this.avatar||!mesh.isPickable||!mesh.checkCollisions) return false;\r\n            if (mesh == this._avatar || !mesh.checkCollisions) return false;\r\n            else return true;\r\n        }, true);\r\n\r\n        if (pi.hit) {\r\n            //postion the camera in front of the mesh that is obstructing camera\r\n            if (this._camera.checkCollisions) {\r\n                const newPos: Vector3 = this._camera.target.subtract(pi.pickedPoint).normalize().scale(this._cameraSkin);\r\n                pi.pickedPoint.addToRef(newPos, this._camera.position);\r\n            } else {\r\n                const nr: number = pi.pickedPoint.subtract(this._camera.target).length();\r\n                this._camera.radius = nr - this._cameraSkin;\r\n            }\r\n        }\r\n    }\r\n\r\n    private _move: boolean = false;\r\n    public anyMovement(): boolean {\r\n        return (this._act._walk || this._act._walkback || this._act._turnLeft || this._act._turnRight || this._act._stepLeft || this._act._stepRight);\r\n    }\r\n\r\n    private _onKeyDown(e: KeyboardEvent) {\r\n        if (!e.key) return;\r\n        if (e.repeat) return;\r\n        switch (e.key.toLowerCase()) {\r\n            case this._jumpKey:\r\n                this._act._jump = true;\r\n                break;\r\n            case \"capslock\":\r\n                this._act._speedMod = !this._act._speedMod;\r\n                break;\r\n            case \"shift\":\r\n                this._act._speedMod = true;\r\n                break;\r\n            case \"up\":\r\n            case \"arrowup\":\r\n            case this._walkKey:\r\n                this._act._walk = true;\r\n                break;\r\n            case \"left\":\r\n            case \"arrowleft\":\r\n            case this._turnLeftKey:\r\n                this._act._turnLeft = true;\r\n                break;\r\n            case \"right\":\r\n            case \"arrowright\":\r\n            case this._turnRightKey:\r\n                this._act._turnRight = true;\r\n                break;\r\n            case \"down\":\r\n            case \"arrowdown\":\r\n            case this._walkBackKey:\r\n                this._act._walkback = true;\r\n                break;\r\n            case this._strafeLeftKey:\r\n                this._act._stepLeft = true;\r\n                break;\r\n            case this._strafeRightKey:\r\n                this._act._stepRight = true;\r\n                break;\r\n        }\r\n        this._move = this.anyMovement();\r\n    }\r\n\r\n    private _onKeyUp(e: KeyboardEvent) {\r\n        if (!e.key) return;\r\n        switch (e.key.toLowerCase()) {\r\n            case \"shift\":\r\n                this._act._speedMod = false;\r\n                break;\r\n            case \"up\":\r\n            case \"arrowup\":\r\n            case this._walkKey:\r\n                this._act._walk = false;\r\n                break;\r\n            case \"left\":\r\n            case \"arrowleft\":\r\n            case this._turnLeftKey:\r\n                this._act._turnLeft = false;\r\n                this._isTurning = false;\r\n                break;\r\n            case \"right\":\r\n            case \"arrowright\":\r\n            case this._turnRightKey:\r\n                this._act._turnRight = false;\r\n                this._isTurning = false;\r\n                break;\r\n            case \"down\":\r\n            case \"arrowdown\":\r\n            case this._walkBackKey:\r\n                this._act._walkback = false;\r\n                break;\r\n            case this._strafeLeftKey:\r\n                this._act._stepLeft = false;\r\n                break;\r\n            case this._strafeRightKey:\r\n                this._act._stepRight = false;\r\n                break;\r\n        }\r\n        this._move = this.anyMovement();\r\n    }\r\n\r\n\r\n    // public disableKeyBoard() {\r\n    //     let canvas: HTMLCanvasElement = this._scene.getEngine().getRenderingCanvas();\r\n    //     canvas.removeEventListener(\"keyup\", this._handleKeyUp, false);\r\n    //     canvas.removeEventListener(\"keydown\", this._handleKeyDown, false);\r\n    // }\r\n\r\n    public enableKeyBoard(b: boolean) {\r\n        let canvas: HTMLCanvasElement = this._scene.getEngine().getRenderingCanvas();\r\n        if (b) {\r\n            canvas.addEventListener(\"keyup\", this._handleKeyUp, false);\r\n            canvas.addEventListener(\"keydown\", this._handleKeyDown, false);\r\n        } else {\r\n            canvas.removeEventListener(\"keyup\", this._handleKeyUp, false);\r\n            canvas.removeEventListener(\"keydown\", this._handleKeyDown, false);\r\n        }\r\n    }\r\n\r\n    // control movement by commands rather than keyboard.\r\n    public walk(b: boolean) {\r\n        this._act._walk = b;\r\n    }\r\n    public walkBack(b: boolean) {\r\n        this._act._walkback = b;\r\n    }\r\n    public walkBackFast(b: boolean) {\r\n        this._act._walkback = b;\r\n        this._act._speedMod = b;\r\n    }\r\n    public run(b: boolean) {\r\n        this._act._walk = b;\r\n        this._act._speedMod = b;\r\n    }\r\n    public turnLeft(b: boolean) {\r\n        this._act._turnLeft = b;\r\n        if (!b) this._isTurning = b;\r\n    }\r\n    public turnLeftFast(b: boolean) {\r\n        this._act._turnLeft = b;\r\n        if (!b) this._isTurning = b;\r\n        this._act._speedMod = b;\r\n    }\r\n    public turnRight(b: boolean) {\r\n        this._act._turnRight = b;\r\n        if (!b) this._isTurning = b;\r\n    }\r\n    public turnRightFast(b: boolean) {\r\n        this._act._turnRight = b;\r\n        if (!b) this._isTurning = b;\r\n        this._act._speedMod = b;\r\n    }\r\n    public strafeLeft(b: boolean) {\r\n        this._act._stepLeft = b;\r\n    }\r\n    public strafeLeftFast(b: boolean) {\r\n        this._act._stepLeft = b;\r\n        this._act._speedMod = b;\r\n    }\r\n    public strafeRight(b: boolean) {\r\n        this._act._stepRight = b;\r\n    }\r\n    public strafeRightFast(b: boolean) {\r\n        this._act._stepRight = b;\r\n        this._act._speedMod = b;\r\n    }\r\n    public jump() {\r\n        this._act._jump = true;\r\n    }\r\n    public idle() {\r\n        this._act.reset();\r\n    }\r\n\r\n    private _act: _Action;\r\n    private _renderer: () => void;\r\n    private _handleKeyUp: (e) => void;\r\n    private _handleKeyDown: (e) => void;\r\n    private _isAG: boolean = false;\r\n    private _hasAnims: boolean = false;\r\n    /**\r\n     * \r\n     * @param avatar \r\n     * @param camera \r\n     * @param scene \r\n     * @param agMap map of animationRange name to animationRange\r\n\t * @param faceForward \r\n     */\r\n    constructor(avatar: Mesh, camera: ArcRotateCamera, scene: Scene, agMap?: {}, faceForward = false) {\r\n\r\n        this._avatar = avatar;\r\n\r\n        this._setRHS(avatar);\r\n        this.setFaceForward(faceForward);\r\n\r\n        this._scene = scene;\r\n\r\n        if (agMap != null) {\r\n            this._isAG = true;\r\n            this.setAnimationGroups(agMap);\r\n        }\r\n\r\n        if (this._isAG || this._skeleton !== null) {\r\n            this._hasAnims = true;\r\n        }\r\n\r\n        if (!this._isAG) this._skeleton = avatar.skeleton;\r\n\r\n        if (!this._isAG && this._skeleton != null) this.checkAnims(this._skeleton);\r\n        this._camera = camera;\r\n        this._savedCameraCollision = this._camera.checkCollisions;\r\n\r\n        this._act = new _Action();\r\n\r\n        this._renderer = () => { this._moveAVandCamera() };\r\n        this._handleKeyUp = (e) => { this._onKeyUp(e) };\r\n        this._handleKeyDown = (e) => { this._onKeyDown(e) };\r\n    }\r\n}\r\n\r\nclass _AnimData {\r\n    public _name: string;\r\n    public _loop: boolean = true;\r\n    public _rate: number = 1;\r\n    public _ag: AnimationGroup;\r\n    public _exist: boolean = false;\r\n\r\n    public constructor(name: string) {\r\n        this._name = name;\r\n    }\r\n}\r\n\r\nclass _Action {\r\n    public _walk: boolean = false;\r\n    public _walkback: boolean = false;\r\n    // speed modifier - changes speed of movement\r\n    public _speedMod: boolean = false;\r\n    public _turnRight: boolean = false;\r\n    public _turnLeft: boolean = false;\r\n    public _stepRight: boolean = false;\r\n    public _stepLeft: boolean = false;\r\n    public _jump: boolean = false;\r\n\r\n\r\n    constructor() {\r\n        this.reset();\r\n    }\r\n\r\n    reset() {\r\n        this._walk = false;\r\n        this._walkback = false;\r\n        this._turnRight = false;\r\n        this._turnLeft = false;\r\n        this._stepRight = false;\r\n        this._stepLeft = false;\r\n        this._jump = false;\r\n        this._speedMod = false;\r\n    }\r\n}\r\n"],"sourceRoot":""}